#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_VERTICES 1001
#define MAX_EDGES 500000

typedef struct Node {
    int vertex;
    struct Node *next;
} Node;

typedef struct {
    Node *adj[MAX_VERTICES]; // Adjacency list
    int vertex_count;
} Graph;

Node* create_node(int vertex) {
    Node *new_node = (Node*)malloc(sizeof(Node));
    new_node->vertex = vertex;
    new_node->next = NULL;
    return new_node;
}

void Add_edge(Graph *graph, int f, int t) {
    Node *new_node = create_node(t);
    new_node->next = graph->adj[f];
    graph->adj[f] = new_node;

    new_node = create_node(f);
    new_node->next = graph->adj[t];
    graph->adj[t] = new_node;
}

void iterative_dfs(int start, Graph *graph, int *visited, int *comp, int *component_size) {
    int stack[MAX_VERTICES];
    int top = -1;

    stack[++top] = start;
    visited[start] = 1;

    while (top >= 0) {
        int vertex = stack[top--];
        comp[(*component_size)++] = vertex;

        // Traverse all neighbors of the current vertex
        Node *current = graph->adj[vertex];
        while (current != NULL) {
            if (!visited[current->vertex]) {
                visited[current->vertex] = 1;
                stack[++top] = current->vertex;
            }
            current = current->next;
        }
    }
}

int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int main() {
    int vertex, edge;
    scanf("%d %d", &vertex, &edge);

    Graph graph;
    graph.vertex_count = vertex;
    memset(graph.adj, 0, sizeof(graph.adj)); // Initialize adjacency list

    for (int i = 0; i < edge; i++) {
        int f, t;
        scanf("%d %d", &f, &t);
        Add_edge(&graph, f, t);
    }

    int visited[MAX_VERTICES] = {0};
    int comp[MAX_VERTICES];
    int component_size = 0;

    iterative_dfs(1, &graph, visited, comp, &component_size);

    qsort(comp, component_size, sizeof(int), compare);

    printf("%d\n", component_size);
    for (int i = 0; i < component_size; i++) {
        printf("%d ", comp[i]);
    }
    printf("\n");

    for (int i = 1; i <= vertex; i++) {
        Node *current = graph.adj[i];
        while (current != NULL) {
            Node *temp = current;
            current = current->next;
            free(temp);
        }
    }

    return 0;
}
